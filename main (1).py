import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv

# Load environment variables
from auth_handler import auth_handler, save_name, ASK_NAME
from telegram.ext import ConversationHandler
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")  # ЁЯЫбя╕П ржПржЦрж╛ржирзЗ ржЯрзЛржХрзЗржи ENV ржерзЗржХрзЗ ржЖрж╕ржмрзЗ

# Start Command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["ЁЯУж ржорзЗржирзБ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "ЁЯМЯ рж╕рзНржмрж╛ржЧрждржо *Zentix Ai Bot* -ржП!\n\n"
        "ЁЯдЦ ржЖржорж┐ ржЖржкржирж╛рж░ ржмрзНржпржХрзНрждрж┐ржЧржд AI рж╕рж╣ржХрж╛рж░рзАред\n\n"
        "ЁЯУж ржорзЗржирзБ ржжрзЗржЦрждрзЗ ржирж┐ржЪрзЗрж░ 'ЁЯУж ржорзЗржирзБ' ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи тАФ\n"
        "ржирждрзБржи ржкрзНрж░ржпрзБржХрзНрждрж┐рж░ рж╕рж╛ржерзЗ ржпрзБржХрзНржд рж╣рзЛржи ржПржХ ржХрзНрж▓рж┐ржХрзЗред",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# Menu Command
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_page(update, context, 1)

# Menu Pagination
async def send_page(update, context, page):
    if update.callback_query:
        chat_id = update.callback_query.message.chat.id
        await update.callback_query.answer()
    else:
        chat_id = update.message.chat.id

    if page == 1:
        keyboard = [
            [InlineKeyboardButton("ЁЯФС рж╕рж╛ржЗржиржЖржк / рж╕рж╛ржЗржиржЗржи", callback_data="auth")],
            [InlineKeyboardButton("ЁЯОм ржнрж┐ржбрж┐ржУ ржПржбрж┐ржЯ", callback_data="video_edit")],
            [InlineKeyboardButton("ЁЯЦ╝я╕П ржлржЯрзЛ ржПржбрж┐ржЯ", callback_data="photo_edit")],
            [InlineKeyboardButton("ЁЯУ╝ CapCut/Remini Pro", callback_data="capcut")],
            [InlineKeyboardButton("ЁЯЫая╕П ржУрзЯрзЗржм/рж╕ржлржЯржУрзЯрзНржпрж╛рж░ ржЕрж░рзНржбрж╛рж░", callback_data="web_order")],
            [InlineKeyboardButton("тЮбя╕П ржкрж░рзЗрж░ ржкрзЗржЬ", callback_data="page_2")]
        ]
    elif page == 2:
        keyboard = [
            [InlineKeyboardButton("ЁЯУ▒ SMM рж╕рж╛рж░рзНржнрж┐рж╕", callback_data="smm")],
            [InlineKeyboardButton("ЁЯдЦ ржУрзЯрж╛ржЬрж┐ржлрж╛ AI", callback_data="wazifa_ai")],
            [InlineKeyboardButton("ЁЯза Nur AI", callback_data="nur_ai")],
            [InlineKeyboardButton("ЁЯУЮ ржХрж╛рж╕рзНржЯржорж╛рж░ ржХрзЗрзЯрж╛рж░", callback_data="customer_care")],
            [InlineKeyboardButton("тмЕя╕П ржкрзЗржЫржирзЗрж░ ржкрзЗржЬ", callback_data="page_1"), InlineKeyboardButton("тЮбя╕П ржкрзЗржЬ рзй", callback_data="page_3")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("ЁЯУ▓ ржЯрзЗрж▓рж┐ржХржо ржкрзНржпрж╛ржХ", callback_data="telecom")],
            [InlineKeyboardButton("ЁЯФе ржЧрзЗржо ржЯржкржЖржк", callback_data="topup")],
            [InlineKeyboardButton("ЁЯТ│ ржмрзНржпрж╛рж▓рзЗржирзНрж╕", callback_data="balance")],
            [InlineKeyboardButton("тмЕя╕П ржкрзЗржЫржирзЗрж░ ржкрзЗржЬ", callback_data="page_2")]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=chat_id,
        text="ЁЯУж ржирж┐ржЪрзЗ ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рж╕рж╛рж░рзНржнрж┐рж╕ ржмрзЗржЫрзЗ ржирж┐ржи:",
        reply_markup=reply_markup
    )

# Callback handler
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    if data.startswith("page_"):
        page_num = int(data.split("_")[1])
        await send_page(update, context, page_num)
    elif data == "auth":
        await auth_handler(update, context)
    else:
        await update.callback_query.answer("ЁЯЪз ржлрж┐ржЪрж╛рж░ржЯрж┐ ржПржЦржирзЛ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ!")

# Run Bot
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("menu", menu))
app.add_handler(CallbackQueryHandler(handle_callback))

# тЬЕ ржпрзЗржХрзЛржирзЛ 'ржорзЗржирзБ' рж▓рж┐ржЦрж▓рзЗржЗ ржмрж╛ржЯржи ржЖрж╕ржмрзЗ
app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"ржорзЗржирзБ"), menu))
app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"(ржорзЗржирзБ|ЁЯУж ржорзЗржирзБ)"), menu))
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(auth_handler, pattern="^auth$")],
    states={ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_name)]},
    fallbacks=[],
)
app.add_handler(conv_handler)
